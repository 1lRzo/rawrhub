
-- RawrHub Loader (disfar√ßado e discreto)
local b64 = ""
local decoded = game:HttpGet("https://pastebin.com/raw/b64decode") -- Suporte a syn.crypt pode variar

-- Para KRNL que tem syn.crypt:
if syn and syn.crypt and syn.crypt.base64 then
    loadstring(syn.crypt.base64.decode(b64))()
elseif Krnl and Krnl.Base64 then
    loadstring(Krnl.Base64.Decode(b64))()
else
    -- Backup simples (decodifica manualmente)
    local byte = string.byte
    local char = string.char
    local t = {} for i = 1, #b64 do t[i] = byte(b64, i) end
    local data = game:HttpService():Base64Decode(b64)
    loadstring(data)()
end
